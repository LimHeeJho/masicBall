package com.example.magicball;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.view.Menu;
import android.view.Window;
import android.widget.ImageView;

public class MainActivity extends Activity {

	private SpeechRecognizer mRecognizer;
	Handler handler = new Handler();
	private final int GOOGLE_STT = 1000;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		ImageView mic = (ImageView) findViewById(R.id.mic);
		mic.setVisibility(android.view.View.INVISIBLE);

		if (!isNetworkConnected(this)) {
			new AlertDialog.Builder(this)
					.setIcon(android.R.drawable.ic_dialog_alert)
					.setTitle("네트워크 연결 오류")
					.setMessage("네트워크 연결 상태 확인 후 다시 시도해 주십시오.")
					.setPositiveButton("확인",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									finish();
								}
							}).show();
		} else {
			mic.setVisibility(android.view.View.VISIBLE);
			Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
			i.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getPackageName());
			i.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ko-KR");

			mRecognizer = SpeechRecognizer.createSpeechRecognizer(this); // 음성인식													// 객체
			mRecognizer.setRecognitionListener(listener); // 음성인식 리스너 등록
			mRecognizer.startListening(i);
		}
	}
	private RecognitionListener listener = new RecognitionListener() {

		@Override
		public void onBeginningOfSpeech() {}

		@Override
		public void onBufferReceived(byte[] buffer) {}

		@Override
		public void onEndOfSpeech() {
			finish();
		}

		@Override
		public void onError(int error) {}

		@Override
		public void onEvent(int eventType, Bundle params) {}

		@Override
		public void onPartialResults(Bundle partialResults) {}

		@Override
		public void onReadyForSpeech(Bundle params) {}

		@Override
		public void onResults(Bundle results) {}

		@Override
		public void onRmsChanged(float rmsdB) {}
	};

	class soundHandler implements Runnable {
		public void run() {

		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	public boolean isNetworkConnected(Context context) {
		boolean isConnected = false;

		ConnectivityManager manager = (ConnectivityManager) context
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo mobile = manager
				.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
		NetworkInfo wifi = manager
				.getNetworkInfo(ConnectivityManager.TYPE_WIFI);

		if (mobile.isConnected() || wifi.isConnected()) {
			isConnected = true;
		} else {
			isConnected = false;
		}
		return isConnected;
	}
}
